
javlar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103b8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000110  00000000  00000000  000103e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000009c  00000000  00000000  000104f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000060  00000000  00000000  00010608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000ae3  00000000  00000000  00010668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000197  00000000  00000000  0001114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002ea7  00000000  00000000  000112e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00014189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000128  00000000  00000000  000141dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000398 	.word	0x08000398

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000398 	.word	0x08000398

080001e8 <init_leds>:
void delaythat(); //delaythat because i'm lazy :)

//My name is Efe Kartal
//e+f+e in ascii is = 101+102+101 = 304 , 304 mod 4 = 0 (red led)
//k+a+r+t+a+l is ascii is = 107 + 97 + 114 + 116 + 97 + 108 = 639 , 639 mod 4 = 3 (green led)
void init_leds(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

rccahblenR = gpiodmask;
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <init_leds+0x28>)
 80001ee:	2208      	movs	r2, #8
 80001f0:	601a      	str	r2, [r3, #0]
gpiodModr=gpiodP14mask;  //clock and leds for red and green enabled
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <init_leds+0x2c>)
 80001f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80001f8:	601a      	str	r2, [r3, #0]
gpiodModr |=gpiodP12mask;
 80001fa:	4b06      	ldr	r3, [pc, #24]	; (8000214 <init_leds+0x2c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a05      	ldr	r2, [pc, #20]	; (8000214 <init_leds+0x2c>)
 8000200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000204:	6013      	str	r3, [r2, #0]

}
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40023830 	.word	0x40023830
 8000214:	40020c00 	.word	0x40020c00

08000218 <turn_name_on>:

void turn_name_on(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

gpiodOdr=gpiodp14onmask; //red led turned on
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <turn_name_on+0x14>)
 800021e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000222:	601a      	str	r2, [r3, #0]

}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr
 800022c:	40020c14 	.word	0x40020c14

08000230 <turn_name_off>:
void turn_name_off(){
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0

gpiodOdr&=gpiodp14ofmask; //red led turned off
 8000234:	4b04      	ldr	r3, [pc, #16]	; (8000248 <turn_name_off+0x18>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <turn_name_off+0x18>)
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]

}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40020c14 	.word	0x40020c14

0800024c <turn_surname_on>:
void turn_surname_on(){
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0

gpiodOdr|=gpiodp12onmask; //green led turned on
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <turn_surname_on+0x18>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <turn_surname_on+0x18>)
 8000256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800025a:	6013      	str	r3, [r2, #0]

}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr
 8000264:	40020c14 	.word	0x40020c14

08000268 <turn_surname_off>:
void turn_surname_off(){
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0

gpiodOdr&=gpiodp12ofmask;  //green led turned off
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <turn_surname_off+0x18>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <turn_surname_off+0x18>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]

}
 8000276:	bf00      	nop
 8000278:	46bd      	mov	sp, r7
 800027a:	bc80      	pop	{r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40020c14 	.word	0x40020c14

08000284 <delaythat>:

void delaythat(){
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
for(int i=0;i<0x00000FFF;i++){
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
 800028e:	e002      	b.n	8000296 <delaythat+0x12>
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f640 72fe 	movw	r2, #4094	; 0xffe
 800029c:	4293      	cmp	r3, r2
 800029e:	ddf7      	ble.n	8000290 <delaythat+0xc>
//simple delay function we use in the laboratory sessions
}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <main>:


int main() {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0

init_leds();
 80002b2:	f7ff ff99 	bl	80001e8 <init_leds>
int i=0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	607b      	str	r3, [r7, #4]
while(i<3){
 80002ba:	e008      	b.n	80002ce <main+0x22>
	turn_name_on();
 80002bc:	f7ff ffac 	bl	8000218 <turn_name_on>
	delaythat();
 80002c0:	f7ff ffe0 	bl	8000284 <delaythat>
	turn_name_off();
 80002c4:	f7ff ffb4 	bl	8000230 <turn_name_off>
	i = i+1;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
while(i<3){
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2b02      	cmp	r3, #2
 80002d2:	ddf3      	ble.n	80002bc <main+0x10>
	//while loop that turns 3 times (efe has 3 characters)
}

int j=0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	603b      	str	r3, [r7, #0]
while(j<6){
 80002d8:	e008      	b.n	80002ec <main+0x40>
	turn_surname_on();
 80002da:	f7ff ffb7 	bl	800024c <turn_surname_on>
	delaythat();
 80002de:	f7ff ffd1 	bl	8000284 <delaythat>
	turn_surname_off();
 80002e2:	f7ff ffc1 	bl	8000268 <turn_surname_off>
	j = j+1;
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	603b      	str	r3, [r7, #0]
while(j<6){
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	2b05      	cmp	r3, #5
 80002f0:	ddf3      	ble.n	80002da <main+0x2e>
	//while loop that turns 6 times (kartal has 6 letters)
}

return 0;
 80002f2:	2300      	movs	r3, #0
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3708      	adds	r7, #8
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffbd 	bl	80002ac <main>

08000332 <LoopForever>:

LoopForever:
    b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
